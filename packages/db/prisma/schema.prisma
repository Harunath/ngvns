generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id            String     @id @default(uuid())
  email         String     @unique
  emailVerified Boolean    @default(false)
  password      String
  fullname      String
  phone         String?    @unique
  phoneVerified Boolean?   @default(false)
  role          ADMIN_ROLE
  address       Json?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model User {
  id               String         @id @default(uuid())
  fullname         String
  relationType     RelationType
  relationName     String
  dob              DateTime
  address          Address?       @relation("UserAddress")
  phone            String         @unique
  email            String         @unique
  emailVerified    Boolean
  aadhaar          String
  aadhaarVerified  Boolean
  password         String
  gender           GenderType     @default(None)
  userPhoto        String
  vrKpId           String         @unique
  nominieeName     String
  nominieeDob      DateTime
  relationship     String
  deleted          Boolean        @default(false)
  deactivated      Boolean        @default(false)
  onBoardingId     String         @unique
  orderId          String         @unique
  healthCard       Boolean        @default(false)
  parentBId        String?
  parentCId        String?
  parentReferralId String?
  
  

  bankDetails      BankDetails?
  TnCAcceptance    TnCAcceptance?
  onBoarding       Onboarding     @relation("UserOnboarding", fields: [onBoardingId], references: [id])
  order            Order          @relation("paymentOrder", fields: [orderId], references: [id])
  joinedBy         User?          @relation("UserDirectJoin", fields: [parentReferralId], references: [vrKpId])
  parentB          User?          @relation("B LEVEL",fields: [parentBId],references: [id])
  parentC          User?          @relation("C LEVEL",fields: [parentCId],references: [id])

  childB           User[]         @relation("B LEVEL")
  childC           User[]         @relation("C LEVEL")
  directJoin       User[]         @relation("UserDirectJoin")
  directJoinOnBoarding       Onboarding[]         @relation("parentreferral")
  
  
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Onboarding {
  id                 String         @id @default(uuid())
  fullname           String
  relationType       RelationType
  relationName       String
  dob                DateTime
  address            Address?       @relation("OnboardingAddress")
  phone              String         @unique
  phoneVerified      Boolean
  email              String
  emailVerified      Boolean
  aadhaar            String
  aadhaarVerified    Boolean
  gender             GenderType     @default(None)
  userPhoto          String
  nominieeName       String
  nominieeDob        DateTime
  relationship       String
  
  referralId         String?        @unique
  
  parentreferralId   String?
  parentrederral     User?    @relation("parentreferral",fields: [parentreferralId],references: [vrKpId])

  onBoardingFinished Boolean        @default(false)
  orders             Order[]        @relation("OnBoardingPaymentOrder")
  TnCAcceptance      TnCAcceptance?
  user               User?          @relation("UserOnboarding")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

}

model Address {
  id            String   @id @default(uuid())
  addressLine   String
  addressLine2  String?
  StateId       String
  State         States  @relation(fields: [StateId],references: [id])
  pincode       String


  onboardingId String?  @unique
  onboarding   Onboarding? @relation("OnboardingAddress", fields: [onboardingId], references: [id])

  userId       String?  @unique
  user         User?    @relation("UserAddress", fields: [userId], references: [id])

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model States {
  id            String   @id @default(uuid())
  name          String
  code          String?
  isActive      Boolean

  addresses     Address[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model BankDetails {
  id            String   @id @default(uuid())
  bankName      String
  accountNumber String
  ifscCode      String
  branch        String
  userId        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GmailVerificationCode {
  id        String   @id @default(uuid())
  email     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PhoneVerificationCode {
  id        String   @id @default(uuid())
  phone     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Order {
  id                  String      @id @default(cuid())
  orderId    String      @unique
  status              OrderStatus @default(PENDING)
  totalAmount         Decimal     @default(4999)
  currency            String      @default("INR")
  notes               String?
  onBoardingId        String
  phone               String?
  email               String?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  onBoarding          Onboarding  @relation("OnBoardingPaymentOrder", fields: [onBoardingId], references: [id])
  payments            Payment[]
  user                User?       @relation("paymentOrder")
}

model Payment {
  id               String        @id @default(cuid())
  paymentSessionId String        @unique
  status           PaymentStatus @default(INITIATED)
  amount           Decimal
  currency         String        @default("INR")
  paymentMethod    String?
  gatewayResponse  Json?
  errorMessage     String?
  processedAt      DateTime?
  orderId          String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  paymentOrderId   String        @unique
  order            Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model TnCVersion {
  id            String          @id @default(uuid())
  version       String
  content       String
  active        Boolean         @default(false)
  createdAt     DateTime        @default(now())
  TnCAcceptance TnCAcceptance[]
}

model TnCAcceptance {
  id           String     @id @default(uuid())
  userId       String?    @unique
  onboardingId String     @unique
  tncVersionId String
  acceptedAt   DateTime   @default(now())
  createdAt    DateTime   @default(now())
  onboarding   Onboarding @relation(fields: [onboardingId], references: [id])
  tncVersion   TnCVersion @relation(fields: [tncVersionId], references: [id])
  user         User?      @relation(fields: [userId], references: [id])
}

enum ADMIN_ROLE {
  SUPER
  ADMIN
  TRESASURAR
}

enum GenderType {
  Male
  Female
  Others
  None
}

enum RelationType {
  So @map("S/o")
  Do @map("D/o")
  Wo @map("W/o")
}

enum TCOptions {
  ACCEPTED
  REJECTED
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentStatus {
  INITIATED
  PENDING
  SUCCESS
  FAILED
  FLAGGED
}

enum SmsStatus {
  QUEUED
  SUBMITTED
  DELIVERED
  FAILED
}

model SmsMessage {
  id               String    @id @default(cuid())
  mobile           String    @db.VarChar(15)
  templateId       String
  text             String
  campId           String?   @unique
  status           SmsStatus @default(QUEUED)
  attempts         Int       @default(0)
  lastError        String?
  idempotencyKey   String?
  processingToken  String?
  processingExpiresAt    DateTime?
  fakeTrigger      String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([mobile, status])
  @@index([idempotencyKey])
}
