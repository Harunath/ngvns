generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id                    String             @id @default(uuid())
  email                 String             @unique
  emailVerified         Boolean            @default(false)
  password              String
  fullname              String
  phone                 String             @unique
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  totpEnabled           Boolean            @default(false)
  totpSecret            String?
  role                  AdminRole
  active                Boolean            @default(true)
  auditLogs             AdminAuditLog[]    @relation("ActorAdminAuditLogs")
  issuedBenefit         Benefit[]
  allocationsMade       LandAllocation[]
  PayoutAttachments     PayoutAttachment[]
  approvedPayoutBatches PayoutBatch[]      @relation("PayoutBatchApprovedBy")
  createdPayoutBatches  PayoutBatch[]
  ApprovedUserPayouts   UserPayout[]       @relation("PayoutApprovedBy")
  RequestedUserPayouts  UserPayout[]       @relation("PayoutRequestedBy")
}

model User {
  id                   String           @id @default(uuid())
  fullname             String
  relationType         RelationType
  relationName         String
  dob                  DateTime
  phone                String           @unique
  email                String           @unique
  emailVerified        Boolean
  aadhaar              String
  aadhaarVerified      Boolean
  gender               GenderType       @default(None)
  userPhoto            String
  nominieeName         String
  nominieeDob          DateTime
  relationship         String
  deleted              Boolean          @default(false)
  deactivated          Boolean          @default(false)
  onBoardingId         String           @unique
  orderId              String           @unique
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  healthCard           Boolean          @default(false)
  parentBId            String?
  parentCId            String?
  parentReferralId     String?
  vrKpId               String           @unique
  password             String
  healthCareDocument   String?
  acquisitionType      AcquisitionType  @default(USER_REFERRAL)
  canRefer             Boolean          @default(true)
  address              Address?         @relation("UserAddress")
  bankDetails          BankDetails?
  benefits             Benefit[]
  landAllotments       LandAllocation[]
  marketingMember      MarketingMember?
  directJoinOnBoarding Onboarding[]     @relation("parentreferral")
  TnCAcceptance        TnCAcceptance?
  onBoarding           Onboarding       @relation("UserOnboarding", fields: [onBoardingId], references: [id])
  order                Order            @relation("paymentOrder", fields: [orderId], references: [id])
  parentB              User?            @relation("B LEVEL", fields: [parentBId], references: [id])
  childB               User[]           @relation("B LEVEL")
  parentC              User?            @relation("C LEVEL", fields: [parentCId], references: [id])
  childC               User[]           @relation("C LEVEL")
  joinedBy             User?            @relation("UserDirectJoin", fields: [parentReferralId], references: [vrKpId])
  directJoin           User[]           @relation("UserDirectJoin")
  UserPayments         UserPayments[]   @relation("payment-user")
  UserPayouts          UserPayout[]
  VRKP_Card            VRKP_Card?

  @@index([id])
  @@index([vrKpId])
  @@index([phone])
}

model MarketingTeam {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?
  imageUrl    String?
  isActive    Boolean           @default(true)
  details     Json?

  members     MarketingMember[]

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model MarketingMember {
  id       String        @id @default(uuid())
  userId   String        @unique
  teamId   String
  role     MarketingRole
  isActive Boolean       @default(true)
  joinedAt DateTime      @default(now())
  endedAt  DateTime?
  team     MarketingTeam @relation(fields: [teamId], references: [id])
  user     User          @relation(fields: [userId], references: [id])

  @@index([teamId, role, isActive])

  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model UserPayments {
  id             String           @id @default(uuid())
  userId         String
  type           UserPaymentsType
  amount         Decimal
  status         PaymentStatus    @default(INITIATED)
  paymentDetails Json?
  paymentDate    DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  user           User             @relation("payment-user", fields: [userId], references: [id])

  @@index([userId, status, type])
  @@index([userId])
  @@index([status])
  @@index([type])
}

model Onboarding {
  id                 String         @id @default(uuid())
  fullname           String
  relationType       RelationType
  relationName       String
  dob                DateTime
  phone              String         @unique
  phoneVerified      Boolean
  email              String
  emailVerified      Boolean
  aadhaar            String
  aadhaarVerified    Boolean
  gender             GenderType     @default(None)
  userPhoto          String
  nominieeName       String
  nominieeDob        DateTime
  relationship       String
  referralId         String?        @unique
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  onBoardingFinished Boolean        @default(false)
  parentreferralId   String?
  address            Address?       @relation("OnboardingAddress")
  parentrederral     User?          @relation("parentreferral", fields: [parentreferralId], references: [vrKpId])
  orders             Order[]        @relation("OnBoardingPaymentOrder")
  TnCAcceptance      TnCAcceptance?
  user               User?          @relation("UserOnboarding")

  @@index([id, phone])
  @@index([id])
  @@index([phone])
}

model Address {
  id           String      @id @default(uuid())
  addressLine  String
  addressLine2 String?
  StateId      String
  pincode      String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  onboardingId String?     @unique
  userId       String?     @unique
  State        States      @relation(fields: [StateId], references: [id])
  onboarding   Onboarding? @relation("OnboardingAddress", fields: [onboardingId], references: [id])
  user         User?       @relation("UserAddress", fields: [userId], references: [id])
}

model States {
  id             String           @id @default(uuid())
  name           String
  code           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  isActive       Boolean
  addresses      Address[]
  LandAllocation LandAllocation[]
  avaliableLands LandParcel[]
}

model BankDetails {
  id                String      @id @default(uuid())
  bankName          String
  ifscCode          String
  branch            String
  userId            String      @unique
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  accountHolderName String
  accountNumberEnc  String
  accountType       AccountType @default(SAVINGS)
  isPrimary         Boolean     @default(false)
  upiId             String?
  User              User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, accountNumberEnc])
  @@index([userId])
}

model GmailVerificationCode {
  id        String   @id @default(uuid())
  email     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PhoneVerificationCode {
  id        String   @id @default(uuid())
  phone     String   @unique
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Order {
  id           String      @id @default(cuid())
  status       OrderStatus @default(PENDING)
  totalAmount  Decimal     @default(4999)
  currency     String      @default("INR")
  notes        String?
  onBoardingId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  email        String?
  orderId      String      @unique
  phone        String?
  onBoarding   Onboarding  @relation("OnBoardingPaymentOrder", fields: [onBoardingId], references: [id])
  payments     Payment[]
  user         User?       @relation("paymentOrder")

  @@index([orderId])
}

model Payment {
  id               String        @id @default(cuid())
  paymentSessionId String        @unique
  status           PaymentStatus @default(INITIATED)
  amount           Decimal
  currency         String        @default("INR")
  paymentMethod    String?
  gatewayResponse  Json?
  errorMessage     String?
  processedAt      DateTime?
  orderId          String
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  paymentOrderId   String        @unique
  order            Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model TnCVersion {
  id            String          @id @default(uuid())
  version       String
  content       String
  createdAt     DateTime        @default(now())
  active        Boolean         @default(false)
  TnCAcceptance TnCAcceptance[]
}

model TnCAcceptance {
  id           String     @id @default(uuid())
  userId       String?    @unique
  onboardingId String     @unique
  tncVersionId String
  acceptedAt   DateTime   @default(now())
  createdAt    DateTime   @default(now())
  onboarding   Onboarding @relation(fields: [onboardingId], references: [id])
  tncVersion   TnCVersion @relation(fields: [tncVersionId], references: [id])
  user         User?      @relation(fields: [userId], references: [id])
}

model SmsMessage {
  id                  String    @id @default(cuid())
  mobile              String    @db.VarChar(15)
  templateId          String
  text                String
  campId              String?   @unique
  status              SmsStatus @default(QUEUED)
  attempts            Int       @default(0)
  lastError           String?
  idempotencyKey      String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  processingExpiresAt DateTime?
  processingToken     String?
  fakeTrigger         String?

  @@index([mobile, status])
  @@index([idempotencyKey])
}

model UserPayoutType {
  id                 String       @id @default(uuid())
  name               String       @unique
  description        String?
  defaultAmountPaise BigInt?
  isActive           Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  payouts            UserPayout[]
}

model PayoutBatch {
  id                String             @id @default(cuid())
  name              String
  status            BatchStatus        @default(DRAFT)
  createdById       String
  approvedById      String?
  currency          Currency           @default(INR)
  totalAmountPaise  BigInt             @default(0)
  scheduledAt       DateTime?
  postedAt          DateTime?
  disbursedAt       DateTime?
  reconciledAt      DateTime?
  metadata          Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  payoutAttachments PayoutAttachment[]
  approvedBy        Admin?             @relation("PayoutBatchApprovedBy", fields: [approvedById], references: [id])
  createdBy         Admin              @relation(fields: [createdById], references: [id])
  payouts           UserPayout[]

  @@index([status, createdAt])
}

model UserPayout {
  id                   String         @id @default(uuid())
  userId               String
  typeId               String
  requestedAmountPaise BigInt
  approvedAmountPaise  BigInt?
  currency             Currency       @default(INR)
  status               PayoutStatus   @default(REQUESTED)
  requestedById        String?
  approvedById         String?
  approvedAt           DateTime?
  paymentDate          DateTime?
  bankReference        String?
  paymentDetails       Json?
  batchId              String?
  idempotencyKey       String?        @unique
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  approvedBy           Admin?         @relation("PayoutApprovedBy", fields: [approvedById], references: [id])
  batch                PayoutBatch?   @relation(fields: [batchId], references: [id])
  requestedBy          Admin?         @relation("PayoutRequestedBy", fields: [requestedById], references: [id])
  type                 UserPayoutType @relation(fields: [typeId], references: [id])
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status, createdAt])
  @@index([batchId, status])
}

model PayoutAttachment {
  id            String      @id @default(cuid())
  payoutBatchId String
  kind          String
  fileUrl       String?
  note          String?
  createdById   String
  createdAt     DateTime    @default(now())
  createdBy     Admin       @relation(fields: [createdById], references: [id])
  payout        PayoutBatch @relation(fields: [payoutBatchId], references: [id], onDelete: Cascade)

  @@index([payoutBatchId, kind])
}

model AdminPermission {
  id               String           @id @default(uuid())
  code             String           @unique
  label            String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  ROLE_PERMISSIONS RolePermission[]
}

model RolePermission {
  id           String          @id @default(uuid())
  role         AdminRole
  permissionId String
  createdAt    DateTime        @default(now())
  permission   AdminPermission @relation(fields: [permissionId], references: [id])

  @@unique([role, permissionId])
}

model AdminAuditLog {
  id         String   @id @default(cuid())
  actorId    String?
  targetType String
  targetId   String?
  action     String
  reason     String?
  metadata   Json?
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())
  actor      Admin?   @relation("ActorAdminAuditLogs", fields: [actorId], references: [id])

  @@index([targetType, targetId])
  @@index([action, createdAt])
}

model VRKP_Card {
  id           String   @id @default(uuid())
  userId       String   @unique
  cardIssuedAt DateTime @default(now())
  cardNumber   String   @unique
  cardUrl      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LandParcel {
  id             String           @id @default(uuid())
  stateId        String
  title          String
  surveyNumber   String
  areaSqYards    Int
  addressLine    String?
  latitude       Decimal?         @db.Decimal(9, 6)
  longitude      Decimal?         @db.Decimal(9, 6)
  unitsTotal     Int
  unitsAvailable Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  LandAllocation LandAllocation[]
  state          States           @relation(fields: [stateId], references: [id])
  units          LandParcelUnit[]

  @@unique([stateId, surveyNumber])
  @@index([stateId])
  @@index([surveyNumber])
  @@index([unitsAvailable])
}

model LandParcelUnit {
  id           String          @id @default(uuid())
  landParcelId String
  unitNumber   Int
  status       LandUnitStatus  @default(AVAILABLE)
  lockedUntil  DateTime?
  note         String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  allocation   LandAllocation?
  landParcel   LandParcel      @relation(fields: [landParcelId], references: [id], onDelete: Cascade)

  @@unique([landParcelId, unitNumber])
  @@index([status])
  @@index([lockedUntil])
}

model LandAllocation {
  id               String           @id @default(uuid())
  userId           String
  landParcelUnitId String           @unique
  status           AllocationStatus @default(CONFIRMED)
  referenceNo      String           @unique
  allocatedAt      DateTime         @default(now())
  allocatedById    String?
  docPdfUrl        String?
  stateId          String
  landParcelId     String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  allocatedBy      Admin?           @relation(fields: [allocatedById], references: [id])
  landParcel       LandParcel       @relation(fields: [landParcelId], references: [id])
  unit             LandParcelUnit   @relation(fields: [landParcelUnitId], references: [id])
  state            States           @relation(fields: [stateId], references: [id])
  user             User             @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([stateId])
  @@index([landParcelId])
  @@index([allocatedAt])
}

model Benefit {
  id          String      @id @default(uuid())
  title       String
  BenefitType BenefitType @default(INSURANCE)
  content     String?
  isActive    Boolean     @default(true)
  userId      String
  details     Json?
  docUrls     String[]
  createdById String?
  issuedAt    DateTime?   @default(now())
  validUntil  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   Admin?      @relation(fields: [createdById], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AdminRole {
  ROOT
  SUPER
  COMMAND
  FINANCE
  DATA_ENTRY
}

enum MarketingRole {
  GENERAL_MANAGER
  MANAGER
  TEAM_LEADER
  AGENT
}

enum AcquisitionType {
  USER_REFERRAL
  MARKETING
}

enum UserPaymentsType {
  LEVEL1
  LEVEL2
  LEVEL3
  L1BAR
  L2BAR
  L3BAR
}

enum AccountType {
  SAVINGS
  CURRENT
}

enum GenderType {
  Male
  Female
  Others
  None
}

enum RelationType {
  So @map("S/o")
  Do @map("D/o")
  Wo @map("W/o")
}

enum TCOptions {
  ACCEPTED
  REJECTED
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentStatus {
  INITIATED
  PENDING
  SUCCESS
  FAILED
  FLAGGED
}

enum SmsStatus {
  QUEUED
  SUBMITTED
  DELIVERED
  FAILED
}

enum PayoutStatus {
  REQUESTED
  APPROVED
  PAID
  FAILED
  CANCELLED
}

enum BatchStatus {
  DRAFT
  READY
  APPROVED
  POSTED
  DISBURSED
  RECONCILED
  CANCELLED
}

enum Currency {
  INR
}

enum LandUnitStatus {
  AVAILABLE
  RESERVED
  ALLOTTED
  INACTIVE
}

enum AllocationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum BenefitType {
  INSURANCE
}
